{"version":3,"file":"static/js/139.ab6607f7.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.js","pages/Register.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { register } from '../../redux/auth/operations';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\n\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  FormErrorMessage,\n  VStack,\n  Heading,\n} from '@chakra-ui/react';\n\nconst contactsSchema = Yup.object().shape({\n  name: Yup.string().min(3, 'Too Short!').required('Must not be empty'),\n  email: Yup.string()\n    .email('Enter valid email address')\n    .required('Must not be empty'),\n  password: Yup.string()\n    .min(7, 'Must be 7 or more')\n    .max(15, 'Must be no more than 15')\n    .required('Must not be empty'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n        password: '',\n      }}\n      validationSchema={contactsSchema}\n      onSubmit={(values, actions) => {\n        dispatch(register(values));\n        actions.resetForm();\n      }}\n    >\n      <Box padding=\"4\" w=\"100%\">\n        <Form>\n          <VStack\n            spacing=\"4\"\n            p=\"5\"\n            bg=\"white\"\n            align=\"stretch\"\n            w=\"350px\"\n            ml=\"auto\"\n            mr=\"auto\"\n            borderRadius=\"5\"\n          >\n            <Heading size=\"md\">Register:</Heading>\n            <Field name=\"name\">\n              {({ field, form }) => (\n                <FormControl isInvalid={form.errors.name && form.touched.name}>\n                  <FormLabel htmlFor=\"name\" fontSize=\"\">\n                    Username\n                  </FormLabel>\n                  <Input {...field} id=\"name\" type=\"text\" size=\"sm\" />\n                  <FormErrorMessage color=\"red\">\n                    {form.errors.name}\n                  </FormErrorMessage>\n                </FormControl>\n              )}\n            </Field>\n\n            <Field name=\"email\">\n              {({ field, form }) => (\n                <FormControl\n                  isInvalid={form.errors.email && form.touched.email}\n                >\n                  <FormLabel htmlFor=\"email\" fontSize=\"\">\n                    Email\n                  </FormLabel>\n                  <Input {...field} id=\"email\" type=\"email\" size=\"sm\" />\n                  <FormErrorMessage color=\"red\">\n                    {form.errors.email}\n                  </FormErrorMessage>\n                </FormControl>\n              )}\n            </Field>\n\n            <Field name=\"password\">\n              {({ field, form }) => (\n                <FormControl\n                  isInvalid={form.errors.password && form.touched.password}\n                >\n                  <FormLabel htmlFor=\"password\">Password</FormLabel>\n                  <Input {...field} id=\"password\" type=\"password\" size=\"sm\" />\n                  <FormErrorMessage color=\"red\">\n                    {form.errors.password}\n                  </FormErrorMessage>\n                </FormControl>\n              )}\n            </Field>\n\n            <Button colorScheme=\"teal\" type=\"submit\">\n              Log In\n            </Button>\n          </VStack>\n        </Form>\n      </Box>\n    </Formik>\n  );\n};\n","import { Helmet } from 'react-helmet-async';\nimport { RegisterForm } from '../components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Phonebook - Register</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["contactsSchema","Yup","shape","name","min","required","email","password","max","RegisterForm","dispatch","useDispatch","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","register","resetForm","children","Box","padding","w","Form","_jsxs","VStack","spacing","p","bg","align","ml","mr","borderRadius","Heading","size","Field","_ref","field","form","FormControl","isInvalid","errors","touched","FormLabel","htmlFor","fontSize","Input","_objectSpread","id","type","FormErrorMessage","color","_ref2","_ref3","Button","colorScheme","Register","Helmet"],"sourceRoot":""}