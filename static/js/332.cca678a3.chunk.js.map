{"version":3,"file":"static/js/332.cca678a3.chunk.js","mappings":"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","sources":["components/Section/Section.js","components/ContactForm/ContactForm.js","../node_modules/@chakra-ui/layout/src/list.tsx","components/ContactList/ContactItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["export const Section = ({ title, children }) => {\n  return (\n    <section>\n      {title && <h2>{title}</h2>}\n      {children}\n    </section>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\n\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  FormErrorMessage,\n  VStack,\n  Heading,\n} from '@chakra-ui/react';\n\nconst contactsSchema = Yup.object().shape({\n  name: Yup.string().min(3, 'Too Short!').required('Must not be empty'),\n  number: Yup.string()\n    .min(9, 'Must be 9 or more')\n    .max(15, 'Must be no more than 15')\n    .required('Must not be empty'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={contactsSchema}\n      onSubmit={(values, actions) => {\n        dispatch(addContact(values));\n        actions.resetForm();\n      }}\n    >\n      <Form>\n        <VStack\n          spacing=\"4\"\n          p=\"5\"\n          m=\"5\"\n          bg=\"white\"\n          align=\"stretch\"\n          w=\"350px\"\n          borderRadius=\"5\"\n        >\n          <Heading size=\"md\">Add contact:</Heading>\n          <Field name=\"name\">\n            {({ field, form }) => (\n              <FormControl isInvalid={form.errors.name && form.touched.name}>\n                <FormLabel htmlFor=\"name\" fontSize=\"\">\n                  Username\n                </FormLabel>\n                <Input {...field} id=\"name\" type=\"text\" size=\"sm\" />\n                <FormErrorMessage color=\"red\">\n                  {form.errors.name}\n                </FormErrorMessage>\n              </FormControl>\n            )}\n          </Field>\n          <Field name=\"number\">\n            {({ field, form }) => (\n              <FormControl\n                isInvalid={form.errors.number && form.touched.number}\n              >\n                <FormLabel htmlFor=\"number\" fontSize=\"\">\n                  Number\n                </FormLabel>\n                <Input {...field} id=\"number\" type=\"text\" size=\"sm\" />\n                <FormErrorMessage color=\"red\">\n                  {form.errors.number}\n                </FormErrorMessage>\n              </FormControl>\n            )}\n          </Field>\n          <Button colorScheme=\"teal\" type=\"submit\" size=\"sm\">\n            Add contact\n          </Button>\n        </VStack>\n      </Form>\n    </Formik>\n  );\n};\n","import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport type {\n  HTMLChakraProps,\n  SystemProps,\n  ThemingProps,\n} from \"@chakra-ui/system\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemStyleObject,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\n\nconst [ListStylesProvider, useListStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `ListStylesContext`,\n  errorMessage: `useListStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<List />\" `,\n})\n\nexport { useListStyles }\n\ninterface ListOptions {\n  /**\n   * Shorthand prop for `listStyleType`\n   * @type SystemProps[\"listStyleType\"]\n   */\n  styleType?: SystemProps[\"listStyleType\"]\n  /**\n   * Shorthand prop for `listStylePosition`\n   * @type SystemProps[\"listStylePosition\"]\n   */\n  stylePosition?: SystemProps[\"listStylePosition\"]\n  /**\n   * The space between each list item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n}\n\nexport interface ListProps\n  extends HTMLChakraProps<\"ul\">,\n    ThemingProps<\"List\">,\n    ListOptions {}\n\n/**\n * List is used to display list items, it renders a `<ul>` by default.\n *\n * @see Docs https://chakra-ui.com/list\n */\nexport const List = forwardRef<ListProps, \"ul\">(function List(props, ref) {\n  const styles = useMultiStyleConfig(\"List\", props)\n  const {\n    children,\n    styleType = \"none\",\n    stylePosition,\n    spacing,\n    ...rest\n  } = omitThemingProps(props)\n\n  const validChildren = getValidChildren(children)\n\n  const selector = \"& > *:not(style) ~ *:not(style)\"\n\n  const spacingStyle = spacing ? { [selector]: { mt: spacing } } : {}\n\n  return (\n    <ListStylesProvider value={styles}>\n      <chakra.ul\n        ref={ref}\n        listStyleType={styleType}\n        listStylePosition={stylePosition}\n        /**\n         * We added this role to fix the Safari accessibility issue with list-style-type: none\n         * @see https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html\n         */\n        role=\"list\"\n        __css={{ ...styles.container, ...spacingStyle }}\n        {...rest}\n      >\n        {validChildren}\n      </chakra.ul>\n    </ListStylesProvider>\n  )\n})\n\nList.displayName = \"List\"\n\nexport const OrderedList = forwardRef<ListProps, \"ol\">((props, ref) => {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ol\" styleType=\"decimal\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nOrderedList.displayName = \"OrderedList\"\n\nexport const UnorderedList = forwardRef<ListProps, \"ul\">(function UnorderedList(\n  props,\n  ref,\n) {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ul\" styleType=\"initial\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nUnorderedList.displayName = \"UnorderedList\"\n\nexport interface ListItemProps extends HTMLChakraProps<\"li\"> {}\n\n/**\n * ListItem\n *\n * Used to render a list item\n */\nexport const ListItem = forwardRef<ListItemProps, \"li\">(function ListItem(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <chakra.li ref={ref} {...props} __css={styles.item} />\n})\n\nListItem.displayName = \"ListItem\"\n\n/**\n * ListIcon\n *\n * Used to render an icon beside the list item text\n */\nexport const ListIcon = forwardRef<IconProps, \"svg\">(function ListIcon(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <Icon ref={ref} role=\"presentation\" {...props} __css={styles.icon} />\n})\n\nListIcon.displayName = \"ListIcon\"\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { ListItem, Button } from '@chakra-ui/react';\n\nexport const ContactItem = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <ListItem mt=\"4\">\n      <b>{contact.name}</b>: {contact.number}\n      <Button\n        size=\"xs\"\n        ml=\"2\"\n        colorScheme=\"yellow\"\n        onClick={() => dispatch(deleteContact(contact.id))}\n      >\n        Delete\n      </Button>\n    </ListItem>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { visibleContacts } from '../../redux/contacts/selectors';\nimport { ContactItem } from './ContactItem';\n\nimport { UnorderedList } from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const visibleContact = useSelector(visibleContacts);\n\n  return (\n    <>\n      {visibleContact.length ? (\n        <UnorderedList mt=\"4\">\n          {visibleContact.map(contact => (\n            <ContactItem key={contact.id} contact={contact} />\n          ))}\n        </UnorderedList>\n      ) : (\n        <p>No contacts according to your search!</p>\n      )}\n    </>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { updateFilter } from '../../redux/contacts/filterSlice';\nimport { selectFilters } from '../../redux/contacts/selectors';\n\nimport { Box, Input } from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Box pt=\"4\">\n      Find contacts by name\n      <Input\n        mt=\"2\"\n        size=\"sm\"\n        type=\"text\"\n        name=\"filter\"\n        onChange={evt => dispatch(updateFilter(evt.target.value))}\n        value={useSelector(selectFilters)}\n      />\n    </Box>\n  );\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Helmet } from 'react-helmet-async';\nimport { Loader } from '../components/Loader/Loader';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n} from '../redux/contacts/selectors';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { Section } from '../components/Section/Section';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Filter } from '../components/Filter/Filter';\n\nimport { Flex, Box, Heading } from '@chakra-ui/react';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Flex alignItems=\"flex-start\" justifyContent=\"center\">\n      <Helmet>\n        <title>Phonebook - Contacts list</title>\n      </Helmet>\n      <div>\n        <Section>\n          <ContactForm />\n        </Section>\n      </div>\n\n      <Box\n        spacing=\"4\"\n        p=\"5\"\n        m=\"5\"\n        bg=\"white\"\n        align=\"stretch\"\n        w=\"350px\"\n        borderRadius=\"5\"\n        boxShadow=\"base\"\n      >\n        <Heading size=\"md\">Contacts:</Heading>\n        {contacts.length ? (\n          <Section>\n            <Filter />\n            <ContactList />\n          </Section>\n        ) : (\n          <p>No contacts...</p>\n        )}\n        {isLoading && !error && <Loader />}\n      </Box>\n    </Flex>\n  );\n}\n"],"names":["Section","_ref","title","children","_jsxs","_jsx","contactsSchema","Yup","shape","name","min","required","number","max","ContactForm","dispatch","useDispatch","Formik","initialValues","validationSchema","onSubmit","values","actions","addContact","resetForm","Form","VStack","spacing","p","m","bg","align","w","borderRadius","Heading","size","Field","field","form","FormControl","isInvalid","errors","touched","FormLabel","htmlFor","fontSize","Input","_objectSpread","id","type","FormErrorMessage","color","_ref2","Button","colorScheme","createContext","errorMessage","_createContext2","ListStylesProvider","useListStyles","List","forwardRef","props","ref","styles","useMultiStyleConfig","omitThemingProps","_omitThemingProps$sty","styleType","stylePosition","rest","validChildren","getValidChildren","spacingStyle","mt","value","chakra","ul","listStyleType","listStylePosition","role","__css","container","displayName","as","marginStart","UnorderedList","ListItem","li","item","Icon","icon","ContactItem","contact","ml","onClick","deleteContact","ContactList","visibleContact","useSelector","visibleContacts","_Fragment","length","map","Filter","Box","pt","onChange","evt","updateFilter","target","selectFilters","Contacts","contacts","selectContacts","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts","Flex","alignItems","justifyContent","Helmet","boxShadow","Loader"],"sourceRoot":""}